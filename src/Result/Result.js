import React from "react";
import styled from "styled-components";
import { Scrollbars } from "rc-scrollbars";
import "../Document/Document.css";
import test0 from "../Assets/testcase/case1.png";
import test1 from "../Assets/testcase/case2.png";
import test2 from "../Assets/testcase/case3.png";
import test3 from "../Assets/testcase/case4.png";
import test4 from "../Assets/testcase/case5.png";
import test5 from "../Assets/testcase/case6.png";
import test6 from "../Assets/testcase/case7.png";
import test7 from "../Assets/testcase/case8.png";
import test8 from "../Assets/testcase/case9.png";
import test9 from "../Assets/testcase/test9.png";
import test10 from "../Assets/testcase/case11.png";
import test11 from "../Assets/testcase/case10.png";
const results = {
  Sheet1: [
    {
      INPUT: "2\n 0 1 1 0\n 0 0 1 1",
      OUTPUT: "The intersecting points are (0.5 , 0.5) .",
      Image: test0
    },
    {
      INPUT:
        "10\n3 3 2 9 \n0 8 2 6 \n6 9 1 1 \n3 5 8 3 \n0 6 9 2 \n7 7 2 8 \n0 3 9 2 \n4 9 1 7 \n0 4 5 0 \n4 0 2 4 ",
      OUTPUT:
        "The intersecting points are (2.38462 , 7.92308) , (2.2 , 7.8) , (5 , 7.4) , (1 , 7) , (3.4 , 4.84) , (2.7 , 4.8) , (3.22826 , 4.56522) , (2.84211 , 3.94737) , (1.45161 , 2.83871) , (9 , 2) , (3.33333 , 1.33333) .",
      Image: test1
    },
    {
      INPUT:
        "15\n8 3 2 14 \n0 3 7 6 \n11 4 6 11 \n3 5 3 8 \n0 6 14 2 \n7 2 2 8 \n10 13 9 12 \n9 4 6 2 \n10 9 0 5 \n14 5 7 14 \n3 6 0 6 \n1 6 9 7 \n10 6 5 9 \n9 10 9 0 \n12 11 3 4",
      OUTPUT:
        "The intersecting points are (10.3385 , 9.70769) , (9 , 8.66667) , (8.82353 , 8.52941) , (8.44828 , 6.93103) , (3 , 6.8) , (9 , 6.8) , (6.02128 , 6.62766) , (9.25 , 6.45) , (0 , 6) , (3 , 6) , (6.48421 , 5.77895) , (7.86667 , 3.24444) .",
      Image: test2
    },
    {
      INPUT: "4\n1 3 2 1 \n0 0 0 0 \n0 3 3 3 \n3 1 0 1 ",
      OUTPUT: "The intersecting points are (2 , 1) .",
      Image: test3
    },
    {
      INPUT: "5\n3 3 2 4 \n0 3 2 1 \n1 4 1 1 \n3 0 3 3 \n0 1 4 2 ",
      OUTPUT: "The intersecting points are (3 , 3) , (1 , 2) , (3 , 1.75) .",
      Image: test4
    },
    {
      INPUT: "3\n2 0 2 2 \n0 0 1 0 \n2 1 0 2 ",
      OUTPUT: "The intersecting points are (2 , 1) .",
      Image: test5
    },
    {
      INPUT: "5\n3 3 2 4 \n0 3 2 1 \n1 4 1 1 \n3 0 3 3 \n0 1 4 2 ",
      OUTPUT: "The intersecting points are (3 , 3) , (1 , 2) , (3 , 1.75) .",
      Image: test6
    },
    {
      INPUT:
        "20\n13 3 2 9 \n0 8 12 16 \n16 19 11 11 \n3 5 8 13 \n10 6 9 12 \n17 7 12 8 \n0 3 9 12 \n4 9 11 7 \n10 4 15 0 \n4 10 2 4 \n3 1 10 16 \n16 11 9 17 \n15 11 10 4 \n14 5 9 10 \n7 6 3 14 \n4 0 9 0 \n16 12 12 13 \n10 9 19 5 \n15 9 7 19 \n17 4 16 9  ",
      OUTPUT:
        "The intersecting points are (9.77895 , 15.5263) , (10.9688 , 15.3125) , (12.7442 , 13.7907) , (12.2162 , 12.9459) , (12.0526 , 12.6842) , (14.3529 , 12.4118) , (9 , 12) , (14.2453 , 9.9434) , (9.4 , 9.6) , (5.5 , 9) , (5.66667 , 8.66667) , (5.55556 , 8.55556) , (3.41026 , 8.23077) , (6.13793 , 7.72414) , (4.66667 , 7.66667) , (9.775 , 7.35) , (2.5 , 5.5) , (10 , 4) .",
      Image: test7
    },
    {
      INPUT:
        "50 \n33 43 12 29 \n0 8 2 6 \n6 19 11 1 \n43 5 8 43 \n30 16 19 32 \n17 47 22 18 \n30 23 49 42 \n14 19 1 27 \n40 24 35 20 \n44 10 12 34 \n13 1 10 36 \n26 31 29 47 \n25 41 40 44 \n34 25 29 30 \n27 26 43 34 \n4 10 49 20 \n6 32 22 13 \n40 9 19 5 \n45 49 27 19 \n47 24 46 49 \n6 34 43 45 \n7 6 9 4 \n2 15 33 38 \n1 40 30 37 \n45 6 13 11 \n27 42 6 18 \n12 1 10 30 \n8 21 31 14 \n47 14 47 25 \n38 31 18 37 \n1 37 13 29 \n45 0 0 13 \n12 34 23 47 \n21 30 40 7 \n28 26 3 47 \n8 43 38 38 \n35 43 38 20 \n11 46 37 10 \n9 37 18 3 \n23 0 24 5 \n33 2 20 37 \n2 10 5 10 \n0 46 42 35 \n10 47 24 31 \n8 36 19 0 \n15 5 32 24 \n11 6 2 18 \n15 20 18 23 \n39 6 19 30 \n5 32 43 24 ",
      OUTPUT:
        "The intersecting points are (11.5909 , 45.1818) , (42.5132 , 44.8553) , (6.08896 , 44.4053) , (38.8889 , 43.7778) , (8 , 43) , (35.0475 , 42.6357) , (13.5661 , 42.447) , (32.1429 , 42.4286) , (8.81395 , 42.1163) , (18.0156 , 41.1094) , (46.3846 , 39.3846) , (27.5714 , 39.381) , (11.7914 , 38.8837) , (18.7178 , 37.0368) , (18.7636 , 36.7709) , (20.7822 , 34.894) , (20.7939 , 34.8626) , (20.6875 , 34.7857) , (19.108 , 34.7735) , (20.922 , 34.5177) , (36.1429 , 34.2381) , (12 , 34) , (19.3663 , 33.2757) , (26.3934 , 33.0984) , (39 , 32) , (10.3521 , 31.892) , (6.21549 , 31.7441) , (9.40698 , 31.3953) , (9.5125 , 31.05) , (10.1154 , 30.9231) , (19.7824 , 30.8619) , (10.441 , 30.8545) , (10.4545 , 30.697) , (10.7143 , 30.5238) , (36.7308 , 29.7308) , (10.0486 , 29.2955) , (18.439 , 29.1707) , (20.1739 , 28.5913) , (31.875 , 27.125) , (10.7798 , 26.9025) , (21.7778 , 26.6667) , (23.9071 , 26.4809) , (11.0572 , 25.9946) , (25.8723 , 23.5957) , (25.2147 , 22.9605) , (26.9714 , 22.7714) , (28.5517 , 21.5862) , (28.2988 , 21.1646) , (26.8571 , 20.5714) , (47 , 19.5556) , (13.4409 , 19.3441) , (31.9338 , 17.0147) , (7.34043 , 10.8794) , (8.79412 , 8.94118) , (38.5725 , 8.72809) , (17.46 , 5.04) .",
      Image: test8
    },
    {
      INPUT:
        "75 \n8 18 62 29 \n0 33 52 6 \n56 19 36 26 \n18 5 33 68 \n30 66 44 32 \n67 47 47 68 \n55 73 24 42 \n39 19 51 2 \n40 24 60 20 \n44 35 37 59 \n63 51 60 36 \n1 6 54 22 \n25 66 65 69 \n9 25 54 30 \n27 26 18 34 \n54 10 74 20 \n31 32 22 38 \n40 59 44 30 \n45 74 27 19 \n47 74 21 24 \n56 59 18 45 \n7 56 59 29 \n52 65 8 63 \n1 40 30 37 \n70 31 38 11 \n27 67 56 68 \n37 51 35 5 \n58 21 6 14 \n22 64 72 0 \n63 6 18 12 \n51 37 63 29 \n45 0 50 38 \n37 59 73 47 \n46 30 65 57 \n28 1 3 47 \n33 18 13 38 \n10 18 63 45 \n11 71 12 35 \n34 37 43 3 \n23 0 74 5 \n8 52 70 37 \n52 10 30 60 \n0 71 42 10 \n60 72 74 56 \n33 11 44 0 \n40 30 7 49 \n61 56 52 68 \n40 45 68 48 \n14 56 44 5 \n55 57 68 24 \n20 10 23 55 \n55 70 45 30 \n19 48 23 3 \n49 35 41 31 \n69 18 40 12 \n29 10 49 29 \n35 57 42 30 \n37 73 51 20 \n12 47 45 3 \n28 33 42 5 \n67 51 2 26 \n74 29 53 2 \n61 30 45 66 \n19 56 30 30 \n4 36 34 57 \n4 29 52 15 \n28 7 61 57 \n63 67 57 8 \n60 67 41 46 \n19 3 71 7 \n56 70 28 28 \n54 30 2 48 \n45 4 64 35 \n69 0 48 6 \n26 34 26 22 ",
      OUTPUT:
        "The intersecting points are (62.7713 , 68.8328) , (54.8246 , 68.2368) , (54.6353 , 67.9529) , (52.1008 , 67.8655) , (49.7857 , 67.7857) , (47.9787 , 67.7234) , (47.2862 , 67.6995) , (47.3111 , 67.6733) , (54.4 , 67.6) , (48.4634 , 66.4634) , (53.4118 , 66.1176) , (49.9461 , 64.9066) , (46.7619 , 64.7619) , (45.9231 , 63.9231) , (41.6038 , 63.6226) , (31.5991 , 62.1164) , (52.9406 , 61.7624) , (54.1306 , 60.5128) , (40.4269 , 60.0267) , (37 , 59) , (40.7612 , 58.7612) , (48.3333 , 58.5) , (30.7107 , 58.3848) , (39.6486 , 57.6486) , (51.1429 , 57.2105) , (33.7717 , 56.8402) , (37.25 , 55.25) , (11.4624 , 54.3522) , (11.4813 , 53.6732) , (12.1796 , 53.3106) , (36.0513 , 52.9449) , (61.5482 , 52.7243) , (61.803 , 52.4569) , (61.4734 , 51.9885) , (11.5516 , 51.1407) , (17.0782 , 50.7671) , (42.9595 , 50.4392) , (64.2118 , 49.9276) , (17.7389 , 49.6438) , (36.9362 , 49.5319) , (36.961 , 49.4363) , (36.9276 , 49.3343) , (20.5526 , 48.9631) , (22.1396 , 48.5791) , (37.2 , 48.5143) , (22.3782 , 48.0152) , (66.2284 , 47.8102) , (22.5131 , 47.6963) , (19.0524 , 47.411) , (55.802 , 46.6931) , (11.6861 , 46.302) , (36.2857 , 45.7143) , (13.16 , 45.4533) , (36.7446 , 45.1269) , (36.8229 , 45.0267) , (38.1899 , 44.696) , (11.7325 , 44.6311) , (38.7406 , 42.5721) , (22.1437 , 42.1557) , (18.8934 , 42.1523) , (19.5397 , 41.9286) , (19.5536 , 41.7722) , (40.6567 , 40.1194) , (7.15012 , 39.3638) , (23.8113 , 39.3208) , (11.8924 , 38.8732) , (19.8848 , 38.0464) , (20.042 , 36.2773) , (26.2581 , 35.1613) , (43.5852 , 33.0074) , (20.437 , 31.8338) , (59.381 , 31.4127) , (20.561 , 30.439) , (48.2543 , 30.3945) , (61.0992 , 30.2672) , (54 , 30) , (48.8919 , 29.5784) , (48.8724 , 29.4303) , (48.5193 , 29.391) , (48.6983 , 28.7134) , (60.0833 , 28.6096) , (48.7516 , 28.5119) , (12.4507 , 26.5352) , (14.437 , 25.9559) , (14.7793 , 25.3262) , (21.019 , 25.2857) , (21.1331 , 24.0029) , (56.3007 , 22.4379) , (29.4118 , 21.5882) , (50.7323 , 21.0135) , (55.1873 , 20.6214) , (34.439 , 20.122) , (50.9853 , 20.0557) , (35.6422 , 19.771) , (35.5385 , 19.3846) , (35.56 , 17.88) , (64.7626 , 17.1233) , (49.4761 , 15.7361) , (51.7811 , 15.0639) , (62.5455 , 14.2727) , (22.2504 , 11.4333) , (55.9909 , 5.84545) .",
      Image: test10
    },
    {
      INPUT:
        "100 \n33 43 62 29 \n0 8 52 56 \n56 19 11 51 \n43 5 8 93 \n30 66 69 32 \n17 47 72 68 \n80 23 49 92 \n64 69 51 27 \n90 24 35 20 \n44 10 62 84 \n63 1 10 36 \n76 31 29 97 \n75 91 90 44 \n34 25 29 30 \n27 26 43 34 \n4 60 49 20 \n56 32 72 13 \n90 9 19 5 \n95 49 27 19 \n97 24 96 49 \n56 84 93 45 \n7 6 9 54 \n52 65 83 38 \n1 90 30 37 \n95 56 63 11 \n27 42 6 68 \n12 1 10 80 \n58 71 31 14 \n47 64 97 25 \n38 31 18 87 \n51 87 13 79 \n95 50 50 13 \n62 34 73 47 \n21 30 40 57 \n78 26 3 97 \n8 93 88 38 \n85 93 88 20 \n11 46 87 10 \n9 87 68 3 \n73 0 74 5 \n83 52 70 87 \n2 10 5 10 \n0 96 42 85 \n60 47 24 31 \n58 86 19 0 \n15 55 82 74 \n61 6 2 68 \n65 70 18 23 \n89 6 19 30 \n55 32 93 74 \n95 10 73 55 \n30 95 45 5 \n94 48 73 53 \n74 60 41 56 \n44 43 40 37 \n79 35 49 29 \n10 7 17 55 \n87 73 26 45 \n12 72 95 53 \n53 83 17 55 \n17 76 77 76 \n99 54 28 2 \n61 55 70 16 \n94 81 30 80 \n4 86 59 7 \n54 79 2 65 \n53 32 36 32 \n63 17 7 83 \n10 67 16 46 \n19 28 71 7 \n56 20 53 28 \n54 30 77 48 \n20 4 14 10 \n19 25 98 31 \n1 9 51 22 \n17 52 24 95 \n71 53 25 78 \n16 42 97 88 \n32 17 4 43 \n95 49 7 36 \n2 67 45 63 \n40 98 96 51 \n7 67 97 78 \n50 9 30 60 \n16 61 93 9 \n53 98 30 34 \n43 89 88 31 \n92 1 74 94 \n93 65 49 65 \n37 58 41 48 \n43 29 15 89 \n9 88 54 43 \n1 71 16 64 \n77 12 5 11 \n12 82 92 23 \n1 24 4 37 \n2 4 63 91 \n73 75 6 59 \n26 96 59 63 \n58 77 84 47 ",
      OUTPUT:
        "The intersecting points are (5.60779 , 94.5313) , (8 , 93) , (8.4678 , 91.8238) , (30.6 , 91.4) , (50.0244 , 89.72) , (49.9876 , 89.6176) , (50.1205 , 89.506) , (15.5583 , 87.8037) , (48.887 , 86.5552) , (10.6415 , 86.3585) , (18.4142 , 85.8402) , (45.4571 , 85.8331) , (56.9794 , 83.7494) , (22.0967 , 83.3085) , (57.5692 , 83.2544) , (38.8947 , 83.1053) , (47.6239 , 83.0403) , (12.1963 , 82.4494) , (12.5307 , 81.6086) , (85.4745 , 81.4546) , (85.4986 , 80.8672) , (78.2699 , 80.7542) , (61.1454 , 80.4866) , (59.3597 , 80.4587) , (49.6667 , 80.4074) , (54.2213 , 80.3785) , (61.0982 , 80.2926) , (46.6246 , 80.2598) , (55.2639 , 79.9665) , (21.478 , 79.5075) , (10.014 , 79.4478) , (54.7412 , 79.2211) , (54.8331 , 79.0166) , (21.2268 , 77.9649) , (79.1861 , 77.8835) , (45.5181 , 77.1807) , (77.324 , 76.826) , (45.3333 , 76.6667) , (85.6733 , 76.6156) , (20.9483 , 76.2537) , (20.8243 , 75.4921) , (74.3964 , 75.1634) , (68.6438 , 73.9597) , (23.4286 , 73.5714) , (85.8437 , 72.4693) , (16.369 , 71.958) , (17.3779 , 70.7689) , (64.5 , 69.5) , (24.7391 , 68.1304) , (10.0659 , 66.7692) , (7.19826 , 66.5164) , (60.456 , 66.5011) , (77.6516 , 66.3996) , (86.0945 , 66.3676) , (11.4564 , 66.1203) , (60.9126 , 65.9126) , (48 , 65.5) , (48.5644 , 65.1933) , (79.6699 , 64.7056) , (14.9611 , 64.4848) , (62.4365 , 63.9486) , (62.0964 , 62.8499) , (82.4669 , 62.3581) , (57.1113 , 60.5482) , (72.8537 , 59.8611) , (37.8 , 59.2) , (42.9801 , 59.1522) , (39.602 , 57.629) , (81.1813 , 56.8964) , (65.075 , 56.2201) , (17 , 55) , (86.5723 , 54.74) , (38.3423 , 54.6443) , (16.9235 , 54.4756) , (37.3242 , 54.3805) , (70.8808 , 53.0648) , (74.1066 , 52.7365) , (67 , 51.9355) , (80.308 , 51.26) , (82.3671 , 50.7697) , (34.9309 , 50.0815) , (89.0315 , 49.183) , (95 , 49) , (89.99 , 48.9548) , (91.5909 , 48.5736) , (82.8371 , 48.3419) , (93.1773 , 48.1959) , (87.6845 , 45.7126) , (86.9838 , 44.7272) , (39 , 44) , (38.9149 , 43.9149) , (67.6634 , 40.6931) , (26.625 , 39.8889) , (8.37249 , 38.9398) , (65.3576 , 37.9681) , (32.0591 , 36.0246) , (76.4267 , 34.4853) , (15.3266 , 32.4824) , (90.079 , 30.3984) , (82.7255 , 29.8399) , (31.9023 , 28.4511) , (40.4186 , 27.6279) , (21.0419 , 27.1754) , (87.913 , 22.1159) .",
      Image: test11
    }
  ]
};
function NewlineText(props) {
  const text = props.text;
  const newText = text.split("\n").map((str) => <h2>{str}</h2>);

  return newText;
}
class Result extends React.Component {
  constructor() {
    super();
    this.state = {
      height: ""
    };
  }
  componentDidMount() {
    this.setState({ height: window.innerHeight });
  }
  render() {
    return (
      <Scrollbars
        style={{ position: "absolute" }}
        disableDefaultStyles
        renderThumbHorizontal={(props) => <div {...props} class="vertical" />}
        renderThumbVertical={(props) => <div {...props} class="vertical" />}
        style={{ width: "fill", height: this.state.height * 0.93 }}
      >
        <div
          class="container"
          style={{
            color: "white",
            alignSelf: "center",
            minWidth: "-webkit-fill-available",
            marginRight: "10px",
            marginLeft: "10px"
          }}
        >
          <h1 style={{ textAlign: "center", marginTop: 10 }}>
            Result of our Code
          </h1>
          <div class="row">
            <div
              class="col-2"
              style={{
                borderWidth: "2px",
                borderStyle: "solid",
                borderColor: "rgb(79, 4, 109)",
                fontWeight: "bold"
              }}
            >
              <h2 style={{ fontWeight: "bold" }}>Input</h2>
            </div>
            <div
              class="col-4"
              style={{
                borderWidth: "2px",
                borderStyle: "solid",
                borderColor: "rgb(79, 4, 109)",
                fontWeight: "bold"
              }}
            >
              <h2 style={{ fontWeight: "bold" }}>Output</h2>
            </div>
            <div
              class="col"
              style={{
                borderWidth: "2px",
                borderStyle: "solid",
                borderColor: "rgb(79, 4, 109)",
                fontWeight: "bold"
              }}
            >
              <h2 style={{ fontWeight: "bold" }}>Visualize</h2>
            </div>
          </div>
          {results.Sheet1.map((item, index) => {
            var imgPath = "../Assets/testcase/test" + index.toString() + ".png";
            return (
              <div key={index} class="row">
                <div
                  class="col-2"
                  style={{
                    borderWidth: "2px",
                    borderStyle: "solid",
                    borderColor: "rgb(79, 4, 109)",
                    fontWeight: "bold"
                  }}
                >
                  <NewlineText text={item.INPUT} />
                </div>
                <div
                  class="col-4"
                  style={{
                    borderWidth: "2px",
                    borderStyle: "solid",
                    borderColor: "rgb(79, 4, 109)",
                    fontWeight: "bold"
                  }}
                >
                  <NewlineText text={item.OUTPUT} />
                </div>
                <div
                  class="col"
                  style={{
                    borderWidth: "2px",
                    borderStyle: "solid",
                    borderColor: "rgb(79, 4, 109)",
                    fontWeight: "bold"
                  }}
                >
                  <img
                    src={item.Image}
                    style={{ width: "inherit", margin: 10 }}
                    alt="Image"
                  />
                </div>
              </div>
            );
          })}
        </div>
      </Scrollbars>
    );
  }
}

export default Result;
